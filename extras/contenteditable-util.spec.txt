(function(global) {

    console.clear();

    if(typeof util === 'undefined') {
        throw new Error('missing util');
    }

    /**** runner ****/

    console.time('contenteditable');

    testIsRangeWithinStyleNode();

    testIsRangeWordProhibited();

    //testGetRangeWord();

    testFindWordBreakLeft();
    testFindWordBreakRight();
    testFindWordBreakLeftBeginning();
    testFindWordBreakRightEnd();
    testFindWordBreakSpaceLeft();
    testFindWordBreakSpaceRight();

    console.timeEnd('contenteditable');

    return 'tests complete';

    /**** tests ****/

    function testIsRangeWithinStyleNode() {
        var expected = true;
        var actual = util.isRangeWithinStyleNode();

        expect(actual === expected, expected);
    }

    function testIsRangeWordProhibited() {
        var expected = true;
        var prohibited = ['red', 'blue', 'green'];
        var actual = util.isRangeWordProhibited(prohibited);

        expect(actual === expected, expected);
    }

    function testGetRangeWord() {
        var expected = 'thar';
        var actual = util.getRangeWord();

        expect(actual === expected, expected);
    }

    function testGetRangeWordRange() {
        var expected = 'red';
        var actual = util.getRangeWord();

        expect(actual === expected, 'actual result is not "red"');
    }

    function testFindWordBreakSpaceRight() {
        var expected = 4;
        var actual = util.findWordBreak('thar be red in here', 4, 'r');

        expect(actual === expected, expected);
    }

    function testFindWordBreakSpaceLeft() {
        var expected = 0;
        var actual = util.findWordBreak('thar be red in here', 4, 'l');

        expect(actual === expected, expected);
    }

    function testFindWordBreakLeft() {
        var expected = 8;
        var actual = util.findWordBreak('thar be red in here', 9, 'l');

        expect(actual === expected, expected);
    }

    function testFindWordBreakRight() {
        var expected = 11;
        var actual = util.findWordBreak('thar be red in here', 9, 'r');

        expect(actual === expected, expected);
    }

    function testFindWordBreakRightEnd() {
        var expected = 19;
        var actual = util.findWordBreak('thar be red in here', 18, 'r');

        expect(actual === expected, expected);
    }

    function testFindWordBreakLeftBeginning() {
        var expected = 0;
        var actual = util.findWordBreak('thar be red in here', 0, 'l');

        expect(actual === expected, expected);
    }

    // test supporters

    function expect(assertion, expected, message) {
        var caller = 'test';
        if (typeof expect.caller !== 'undefined' && typeof expect.caller.name !== 'undefined') {
            caller = expect.caller.name;
        }
        message = message || 'actual result is not ' + expected;
        if (!assertion) {
            console.error(caller + ' ' + message);
            return;
        }
        console.info(caller + ' passed');
    }

})(window);